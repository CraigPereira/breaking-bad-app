{"version":3,"sources":["images/breaking-bad-logo.png","components/Navbar.js","components/Searchbar.js","components/Card.js","components/CardList.js","components/Quote.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","Logo","alt","width","height","Searchbar","characters","setSearchField","handleSumbit","onSubmit","type","placeholder","onChange","Card","character","getQuote","img","name","nickname","occupation","join","portrayed","onClick","CardList","charList","length","map","key","char_id","Quote","quote","console","log","App","state","search","e","target","value","trim","setState","preventDefault","reset","axios","get","then","res","data","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1556a626.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/breaking-bad-logo.1a8b14b9.png\";","import React from \"react\";\r\nimport Logo from \"../images/breaking-bad-logo.png\";\r\nimport \"../css/Navbar.css\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper black\">\r\n        <div className=\"container\">\r\n          <img\r\n            src={Logo}\r\n            alt=\"Breaking Bad\"\r\n            className=\"brand-logo center responsive-img\"\r\n            width=\"70\"\r\n            height=\"50\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"../css/Searchbar.css\";\r\n\r\nconst Searchbar = ({ characters, setSearchField, handleSumbit }) => {\r\n  return (\r\n    <div className=\"searchbar\">\r\n      <form className=\"form\" onSubmit={handleSumbit}>\r\n        <div className=\"row\">\r\n          <div className=\"input-field\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"  Say my name\"\r\n              className=\"validate\"\r\n              onChange={setSearchField}\r\n            />\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Searchbar;\r\n","import React from \"react\";\r\nimport \"../css/Card.css\";\r\n\r\nconst Card = ({ character, getQuote }) => {\r\n  return (\r\n    <div className=\"card-wrapper\">\r\n      <div className=\"card\">\r\n        <div className=\"card-img center\">\r\n          <img\r\n            src={character.img}\r\n            alt=\"Character\"\r\n            height=\"350px\"\r\n            width=\"300px\"\r\n          />\r\n        </div>\r\n        <div className=\"card-content\">\r\n          <h5 className=\"card-title center\">Name: {character.name}</h5>\r\n          <h5 className=\"card-title center\">Nickname: {character.nickname}</h5>\r\n          <h5 className=\"card-title center\">\r\n            Occupation: {character.occupation.join(\", \")}\r\n          </h5>\r\n          <h5 className=\"card-title center\">\r\n            Portrayed by: {character.portrayed}\r\n          </h5>\r\n          <div className=\"center\">\r\n            <button onClick={() => getQuote(character.name)}>Get Quote</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"../css/CardList.css\";\r\n\r\nconst CardList = ({ characters, getQuote }) => {\r\n  const charList = characters.length ? (\r\n    characters.map((character) => {\r\n      return (\r\n        <Card\r\n          character={character}\r\n          key={character.char_id}\r\n          getQuote={getQuote}\r\n        />\r\n      );\r\n    })\r\n  ) : (\r\n    <div className=\"col s12 l6\">\r\n      <div className=\"card\">\r\n        <div className=\"card-content\">\r\n          <div className=\"card-title center\">No characters yet</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n  return <div className=\"card-styles\">{charList}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"../css/Card.css\";\r\n\r\nconst Quote = ({ quote }) => {\r\n  console.log(quote);\r\n  return (\r\n    <div className=\"card-wrapper quote-wrapper\">\r\n      <div className=\"card\">\r\n        <div className=\"card-content\">\r\n          <p>\"{quote}\"</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quote;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./css/App.css\";\nimport Navbar from \"./components/Navbar\";\nimport SearchBar from \"./components/Searchbar\";\nimport CardList from \"./components/CardList\";\nimport Quote from \"./components/Quote\";\n\nclass App extends Component {\n  state = {\n    characters: [],\n    search: \"\",\n    quote: null,\n  };\n  setSearchField = (e) => {\n    const name = e.target.value.trim();\n    this.setState({\n      search: name,\n    });\n  };\n  handleSumbit = (e) => {\n    e.preventDefault();\n    e.target.reset();\n    const path = \"https://www.breakingbadapi.com/api/characters?name=\";\n    const name = this.state.search;\n    axios.get(`${path + name}`).then((res) => {\n      this.setState({\n        characters: res.data,\n      });\n    });\n  };\n  getQuote = (name) => {\n    const path = \"https://www.breakingbadapi.com/api/quote/random?author=\";\n    axios.get(`${path + name}`).then((res) => {\n      this.setState({\n        quote: res.data[0].quote,\n      });\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <SearchBar\n          characters={this.state.characters}\n          setSearchField={this.setSearchField}\n          handleSumbit={this.handleSumbit}\n        />\n        {this.state.quote && <Quote quote={this.state.quote} />}\n        <CardList characters={this.state.characters} getQuote={this.getQuote} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}